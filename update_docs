#!/usr/bin/python3

import inspect
from typing import IO


def document_source_styles(file: IO[str] = None):
    """
    Generate markdown documentation for source styles
    """
#             - document source styles in an autogenerated markdown file based on
#               class docstrings
    from moncic.source import source
    source_types = source.registry()

    print("""# Source styles

This the documentation of source styles you can use with `monci ci -s <name>`.
""", file=file)

    for name, source_cls in sorted(source_types.items()):
        print(f"## {name}", file=file)
        print(file=file)

        print(inspect.getdoc(source_cls), file=file)


def document_build_styles(file: IO[str] = None):
    """
    Generate markdown documentation for build styles
    """
    # TODO: add inheritance info, and don't repeat inherited options
    from moncic.build import Build

    print("""# Build styles

This the documentation of the various ways Moncic-CI can build sources, and the
options that can be used to control them.
""", file=file)

    for cls in Build.list_build_classes():
        print(f"## {cls.get_name()}", file=file)
        print(file=file)
        print(inspect.getdoc(cls), file=file)
        print(file=file)

        print("### Options", file=file)
        print(file=file)
        for name, doc in cls.list_build_options():
            print(f"#### {name}", file=file)
            print(file=file)
            print(doc, file=file)
            print(file=file)


def main():
    with open("doc/source-styles.md", "wt") as fd:
        document_source_styles(file=fd)
    with open("doc/build-styles.md", "wt") as fd:
        document_build_styles(file=fd)


if __name__ == "__main__":
    main()
